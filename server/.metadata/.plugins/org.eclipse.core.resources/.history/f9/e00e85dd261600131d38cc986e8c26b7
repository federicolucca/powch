include "powch_interfaces.iol"
include "console.iol"
include "string_utils.iol"
include "math.iol"

execution { concurrent }

inputPort self {
	Location: "local"
	Interfaces: LoginInterface, ProfileInterface,	ContractInterface
}

init {
	if ( !global.first ){
		with ( global.users ){
			.("mario rossi").password = "password";
			.("mario rossi").token = new
		};
		
		with ( global.contracts ){
			.( "mario rossi" )[ #.( "mario rossi" ) ] = "ENEL010000";
			.( "mario rossi" )[ #.( "mario rossi" ) ] = "HERA148231"
		};
		
		with( global.contract ){
			with( .("ENEL010000") ){
				.label = "House";
				.users[ #.users ] = "mario rossi";
				.users[ #.users ] = "mario bianchi"
			};
			
			with( .( "HERA148231" ) ){
				.label = "Building";
				.users[ #.users ] = "mario rossi"
			}
			
		};
		
		with( global.points ){
			.( "mario rossi" ).count = 12314
		};
		
		with( global.consumption ){
			for( i=1, i<13, i++){
				.("ENEL010000")[ i ].date = "20120" + i;
				random@Math()( value );
				.("ENEL010000")[ i ].value = value*100
			};
			
			for( i=1, i<13, i++){
				.( "HERA148231" )[ i ].date = "20120" + i;
				random@Math()( value );
				.( "HERA148231" )[ i ].value = value*100
			}
		}
	}
}

define findUsernameByToken {
	foreach ( name : global.users ){
		if ( global.users.(name).token == _findUsernameByToken.token ){
			_findUsernameByToken.username = name
		}
	}
}

main {
	
	[ login( loginRequest )( authToken ){
		if( loginRequest.password == global.users.( loginRequest.username ).password ){
			authToken.token = global.users.(loginRequest.username).token
		} else {
			throw( LoginFault )
		}
	}]{ println@Console( "Successful login procedure for " + loginRequest.username )() }
	
	[ getPointCount( authToken )( pointCountResponse ){
		_findUsernameByToken.token = authToken.token;
		findUsernameByToken;
		pointCountResponse.count = global.points.( _findUsernameByToken.username ).count
	}]{ nullProcess }
	
	[ getContracts( authToken )( response ){
		_findUsernameByToken.token = authToken.token;
		findUsernameByToken;
		username = _findUsernameByToken.username;
		for( i=0, i < #global.contracts.( username ), i++ ){
			contractID = global.contracts.( username )[ i ];
			response.contracts[ #response.contracts ].id = contractID;
			with ( response.contracts[ #response.contracts-1 ] ){
				.label = global.contract.( contractID ).label;
				.users << global.contract.( contractID ).users
			}
		}
	}]{ nullProcess }
	
	[ getConsumption( request )( response ){
		_findUsernameByToken.token = request.token;
		println@Console( "looking for token: " + _findUsernameByToken.token )();
		findUsernameByToken;
		println@Console( "found username: " + _findUsernameByToken.usernama )();
		if ( is_defined( _findUsernameByToken.username ) ) {
			valueToPrettyString@StringUtils( global.consumption.( request.id ) )( prettyValue );
			println@Console( prettyValue )();
			response.startDate = global.consumption.( request.id )[ 0 ].date;
			data << global.consumption.( request.id );
			// TODO LIMIT FROM DATE TO DATE
			for( i=0, i < global.consumption.( request.id ), i++ ){
				response.data[ #response.data ] = global.consumption.( request.id ).data
			}
		}
	}]{ nullProcess }
	
}